# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SchemaError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code=None, message=None, stacktrace=None):  # noqa: E501
        """SchemaError - a model defined in OpenAPI

        :param code: The code of this SchemaError.  # noqa: E501
        :type code: int
        :param message: The message of this SchemaError.  # noqa: E501
        :type message: str
        :param stacktrace: The stacktrace of this SchemaError.  # noqa: E501
        :type stacktrace: str
        """
        self.openapi_types = {
            'code': int,
            'message': str,
            'stacktrace': str
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'stacktrace': 'stacktrace'
        }

        self._code = code
        self._message = message
        self._stacktrace = stacktrace

    @classmethod
    def from_dict(cls, dikt) -> 'SchemaError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SchemaError of this SchemaError.  # noqa: E501
        :rtype: SchemaError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this SchemaError.


        :return: The code of this SchemaError.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SchemaError.


        :param code: The code of this SchemaError.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def message(self):
        """Gets the message of this SchemaError.


        :return: The message of this SchemaError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SchemaError.


        :param message: The message of this SchemaError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def stacktrace(self):
        """Gets the stacktrace of this SchemaError.


        :return: The stacktrace of this SchemaError.
        :rtype: str
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this SchemaError.


        :param stacktrace: The stacktrace of this SchemaError.
        :type stacktrace: str
        """

        self._stacktrace = stacktrace
